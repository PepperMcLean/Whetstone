Problem Solving Approach
  Objectives
    Define what an algorithm is
    Devise a plan to solve algorithms
    Compare and contrast problem solving patterns including frequency counters, two pointer problems and divide and conquer
  
  What is an Algorithm?
    A process or set of steps to accomplish a certain task.
  
  Why do i need to know this?
    Almost everything that you do in programming involves some kind of algorithm!
    It's the foundation for being a successful problem solving and developer
    Also... INTERVIEWS
  
  How do you improve?
    1. Devise a plan for solving problems
    2. Master common problem solving patterns
  
  Problem Solving
    Understand the problem
    Explore concrete examples
    Break it down
    Solve/simplify
    Look back and refactor

  Understand The Problem
    1.Can I restate the problem in my own words?
    2.What are the inputs that go into the orblem?
    3.What are the outputs that should come from the solution to the problem?
    4.Can the outputs be determined from the inputs? In other words, do I have enough information to solve the problem? 
      (You may not be able to answer this question until you set about solving the problem. That's okay; it's still worth 
      considering this question at the early stage)
    5.How should I label the  important pieces of data that are a part of the problem?
  
    Example(ex.1)
      Write function which takes two numbers and returns their sum.
  
  Concrete Examples
    Coming up with examples can help you understand the problem better
    Examples also provide sanity checks that your eventual solution works how it should
    User Stories! // Unit Tests!
    
    Explore Examples
      1.Start with Simple Examples
      2.Progress to More Complex Examples
      3.Explore Examples with Empty Inputs
      4.Explore Examples with Invalid Inputs
    
    Example(ex.2)
      Write a function which takes in a string and returns counts of each character in the string.
  
  Break It Down
    Explicitly write out the steps you need to take.
      This forces you to think about the code you'll write before you write it, and helps you catch any lingering conceptual issues or
        misunderstandings before you dive in and have to worry about details (e.g. language syntax) as well.
    
    Example(ex.2)
      Write a function which takes in a string and returns counts of each character in the string.
  
  Solve Or Simplify
    Find the core difficulty in what you're trying to do 
    Temporarily ignore that difficulty
    Write a simplified solution
    Then incorporate that difficulty back in

    Example(ex.2)
      Write a function which takes in a string and returns counts of each character in the string.
  
  